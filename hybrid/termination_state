failed to prove termination, possible solutions:
  - Use `have`-expressions to prove the remaining goals
  - Use `termination_by` to specify a different well-founded relation
  - Use `decreasing_by` to specify your own tactic for discharging this kind of goal
φ : Form
x✝ :
  (x : SVAR) ×'
    (y : SVAR) ×'
      (M : Model) ×'
        (_ : M.W) ×' (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y { fst := φ, snd := x✝ } →
    (((y.2.2.2.1,y.2.2.2.2.1,y.2.2.2.2.2.1)⊨y.1[y.2.2.1//y.2.1]) ↔ (y.2.2.2.1,y.2.2.2.2.1,y.2.2.2.2.2.2.1)⊨y.1)
x : SVAR
y✝ :
  (y : SVAR) ×'
    (M : Model) ×'
      (_ : M.W) ×' (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y { fst := φ, snd := { fst := x, snd := y✝ } } →
    (((y.2.2.2.1,y.2.2.2.2.1,y.2.2.2.2.2.1)⊨y.1[y.2.2.1//y.2.1]) ↔ (y.2.2.2.1,y.2.2.2.2.1,y.2.2.2.2.2.2.1)⊨y.1)
y : SVAR
M✝ :
  (M : Model) ×'
    (_ : M.W) ×' (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y_1 :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y_1 { fst := φ, snd := { fst := x, snd := { fst := y, snd := M✝ } } } →
    (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
      (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
M : Model
s✝ : (_ : M.W) ×' (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y_1 :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y_1 { fst := φ, snd := { fst := x, snd := { fst := y, snd := { fst := M, snd := s✝ } } } } →
    (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
      (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
s : M.W
g✝ : (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y_1 :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y_1 { fst := φ, snd := { fst := x, snd := { fst := y, snd := { fst := M, snd := { fst := s, snd := g✝ } } } } } →
    (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
      (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
g : I M.W
g'✝ : (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y_1 :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y_1
      { fst := φ,
        snd :=
          { fst := x,
            snd := { fst := y, snd := { fst := M, snd := { fst := s, snd := { fst := g, snd := g'✝ } } } } } } →
    (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
      (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
g' : I M.W
h_subst✝¹ : (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y
: ∀
  (y_1 :
    (φ : Form) ×'
      (x : SVAR) ×'
        (y : SVAR) ×'
          (M : Model) ×'
            (_ : M.W) ×'
              (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
  (invImage
          (fun a =>
            PSigma.casesOn a fun φ snd =>
              PSigma.casesOn snd fun x snd =>
                PSigma.casesOn snd fun y snd =>
                  PSigma.casesOn snd fun M snd =>
                    PSigma.casesOn snd fun s snd =>
                      PSigma.casesOn snd fun g snd =>
                        PSigma.casesOn snd fun g' snd =>
                          PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
          instWellFoundedRelation).1
      y_1
      { fst := φ,
        snd :=
          { fst := x,
            snd :=
              { fst := y,
                snd :=
                  { fst := M, snd := { fst := s, snd := { fst := g, snd := { fst := g', snd := h_subst✝¹ } } } } } } } →
    (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
      (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
h_subst✝ : is_substable φ y x
h_var✝ : (_ : is_variant g g' x) ×' g' x = g y
a✝¹ :
  ∀
    (y_1 :
      (φ : Form) ×'
        (x : SVAR) ×'
          (y : SVAR) ×'
            (M : Model) ×'
              (_ : M.W) ×'
                (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
    (invImage
            (fun a =>
              PSigma.casesOn a fun φ snd =>
                PSigma.casesOn snd fun x snd =>
                  PSigma.casesOn snd fun y snd =>
                    PSigma.casesOn snd fun M snd =>
                      PSigma.casesOn snd fun s snd =>
                        PSigma.casesOn snd fun g snd =>
                          PSigma.casesOn snd fun g' snd =>
                            PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
            instWellFoundedRelation).1
        y_1
        { fst := φ,
          snd :=
            { fst := x,
              snd :=
                { fst := y,
                  snd :=
                    { fst := M,
                      snd :=
                        { fst := s,
                          snd :=
                            { fst := g, snd := { fst := g', snd := { fst := h_subst✝, snd := h_var✝ } } } } } } } } →
      (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
        (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
h_var : is_variant g g' x
h_which_var : g' x = g y
a✝ :
  ∀
    (y_1 :
      (φ : Form) ×'
        (x : SVAR) ×'
          (y : SVAR) ×'
            (M : Model) ×'
              (_ : M.W) ×'
                (g : I M.W) ×' (g' : I M.W) ×' (_ : is_substable φ y x) ×' (_ : is_variant g g' x) ×' g' x = g y),
    (invImage
            (fun a =>
              PSigma.casesOn a fun φ snd =>
                PSigma.casesOn snd fun x snd =>
                  PSigma.casesOn snd fun y snd =>
                    PSigma.casesOn snd fun M snd =>
                      PSigma.casesOn snd fun s snd =>
                        PSigma.casesOn snd fun g snd =>
                          PSigma.casesOn snd fun g' snd =>
                            PSigma.casesOn snd fun h_subst snd => PSigma.casesOn snd fun h_var snd => φ)
            instWellFoundedRelation).1
        y_1
        { fst := φ,
          snd :=
            { fst := x,
              snd :=
                { fst := y,
                  snd :=
                    { fst := M,
                      snd :=
                        { fst := s,
                          snd :=
                            { fst := g,
                              snd :=
                                { fst := g',
                                  snd :=
                                    { fst := h_subst✝, snd := { fst := h_var, snd := h_which_var } } } } } } } } } →
      (((y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.1)⊨y_1.1[y_1.2.2.1//y_1.2.1]) ↔
        (y_1.2.2.2.1,y_1.2.2.2.2.1,y_1.2.2.2.2.2.2.1)⊨y_1.1)
ψ : Form
: is_substable ψ y x → (((M,s,g)⊨ψ[y//x]) ↔ (M,s,g')⊨ψ)
h_subst : is_substable (□ψ) y x
h1 : (M,s,g)⊨(□ψ)[y//x]
s' : M.W
s_R_s' : Model.R M s s'
⊢ sizeOf ψ < sizeOf φ